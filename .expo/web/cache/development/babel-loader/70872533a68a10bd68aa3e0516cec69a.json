{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"style\", \"spacing\", \"fixed\", \"data\", \"itemDimension\", \"renderItem\", \"horizontal\", \"onLayout\", \"staticDimension\", \"maxDimension\", \"additionalRowStyle\", \"itemContainerStyle\", \"keyExtractor\"];\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\IT Office\\\\Desktop\\\\mySafaricomAppClone\\\\node_modules\\\\react-native-super-grid\\\\FlatGrid.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { forwardRef, memo, useState, useCallback, useMemo } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from \"./utils\";\nvar FlatGrid = memo(forwardRef(function (props, ref) {\n  var style = props.style,\n      spacing = props.spacing,\n      fixed = props.fixed,\n      data = props.data,\n      itemDimension = props.itemDimension,\n      renderItem = props.renderItem,\n      horizontal = props.horizontal,\n      onLayout = props.onLayout,\n      staticDimension = props.staticDimension,\n      maxDimension = props.maxDimension,\n      externalRowStyle = props.additionalRowStyle,\n      itemContainerStyle = props.itemContainerStyle,\n      keyExtractor = props.keyExtractor,\n      restProps = _objectWithoutProperties(props, _excluded);\n\n  if (props.items && !props.data) {\n    throw new Error('React Native Super Grid - Prop \"items\" has been renamed to \"data\" in version 4');\n  }\n\n  var _useState = useState(function () {\n    var defaultTotalDimension = staticDimension;\n\n    if (!staticDimension) {\n      var dimension = horizontal ? 'height' : 'width';\n      defaultTotalDimension = maxDimension || Dimensions.get('window')[dimension];\n    }\n\n    return defaultTotalDimension;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      totalDimension = _useState2[0],\n      setTotalDimension = _useState2[1];\n\n  var onLayoutLocal = useCallback(function (e) {\n    if (!staticDimension) {\n      var _ref = e.nativeEvent.layout || {},\n          width = _ref.width,\n          height = _ref.height;\n\n      var newTotalDimension = horizontal ? height : width;\n\n      if (maxDimension && newTotalDimension > maxDimension) {\n        newTotalDimension = maxDimension;\n      }\n\n      if (totalDimension !== newTotalDimension) {\n        setTotalDimension(newTotalDimension);\n      }\n    }\n\n    if (onLayout) {\n      onLayout(e);\n    }\n  }, [staticDimension, maxDimension, totalDimension, horizontal, onLayout]);\n  var renderRow = useCallback(function (_ref2) {\n    var rowItems = _ref2.rowItems,\n        rowIndex = _ref2.rowIndex,\n        separators = _ref2.separators,\n        isLastRow = _ref2.isLastRow,\n        itemsPerRow = _ref2.itemsPerRow,\n        rowStyle = _ref2.rowStyle,\n        containerStyle = _ref2.containerStyle;\n    var additionalRowStyle = {};\n\n    if (isLastRow) {\n      additionalRowStyle = _objectSpread(_objectSpread({}, !horizontal ? {\n        marginBottom: spacing\n      } : {}), horizontal ? {\n        marginRight: spacing\n      } : {});\n    }\n\n    return React.createElement(View, {\n      style: [rowStyle, additionalRowStyle, externalRowStyle],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, rowItems.map(function (item, i) {\n      return React.createElement(View, {\n        key: keyExtractor ? keyExtractor(item, i) : \"item_\" + (rowIndex * itemsPerRow + i),\n        style: [containerStyle, itemContainerStyle],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 15\n        }\n      }, renderItem({\n        item: item,\n        index: rowIndex * itemsPerRow + i,\n        separators: separators,\n        rowIndex: rowIndex\n      }));\n    }));\n  }, [renderItem, spacing, keyExtractor, externalRowStyle, itemContainerStyle, horizontal]);\n\n  var _useMemo = useMemo(function () {\n    return calculateDimensions({\n      itemDimension: itemDimension,\n      staticDimension: staticDimension,\n      totalDimension: totalDimension,\n      spacing: spacing,\n      fixed: fixed\n    });\n  }, [itemDimension, staticDimension, totalDimension, spacing, fixed]),\n      containerDimension = _useMemo.containerDimension,\n      itemsPerRow = _useMemo.itemsPerRow,\n      fixedSpacing = _useMemo.fixedSpacing;\n\n  var _useMemo2 = useMemo(function () {\n    return generateStyles({\n      horizontal: horizontal,\n      itemDimension: itemDimension,\n      containerDimension: containerDimension,\n      spacing: spacing,\n      fixedSpacing: fixedSpacing,\n      fixed: fixed\n    });\n  }, [horizontal, itemDimension, containerDimension, spacing, fixedSpacing, fixed]),\n      containerStyle = _useMemo2.containerStyle,\n      rowStyle = _useMemo2.rowStyle;\n\n  var rows = chunkArray(data, itemsPerRow);\n  var localKeyExtractor = useCallback(function (rowItems, index) {\n    if (keyExtractor) {\n      return rowItems.map(function (rowItem, rowItemIndex) {\n        return keyExtractor(rowItem, rowItemIndex);\n      }).join('_');\n    }\n\n    return \"row_\" + index;\n  }, [keyExtractor]);\n  return React.createElement(FlatList, _extends({\n    data: rows,\n    ref: ref,\n    extraData: totalDimension,\n    renderItem: function renderItem(_ref3) {\n      var item = _ref3.item,\n          index = _ref3.index;\n      return renderRow({\n        rowItems: item,\n        rowIndex: index,\n        isLastRow: index === rows.length - 1,\n        itemsPerRow: itemsPerRow,\n        rowStyle: rowStyle,\n        containerStyle: containerStyle\n      });\n    },\n    style: [_objectSpread({}, horizontal ? {\n      paddingLeft: spacing\n    } : {\n      paddingTop: spacing\n    }), style],\n    onLayout: onLayoutLocal,\n    keyExtractor: localKeyExtractor\n  }, restProps, {\n    horizontal: horizontal,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n}));\nFlatGrid.displayName = 'FlatGrid';\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  additionalRowStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  itemContainerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  keyExtractor: PropTypes.func,\n  listKey: PropTypes.string\n};\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  additionalRowStyle: undefined,\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  keyExtractor: null,\n  listKey: undefined\n};\nexport default FlatGrid;","map":{"version":3,"sources":["C:/Users/IT Office/Desktop/mySafaricomAppClone/node_modules/react-native-super-grid/FlatGrid.js"],"names":["React","forwardRef","memo","useState","useCallback","useMemo","PropTypes","chunkArray","calculateDimensions","generateStyles","FlatGrid","props","ref","style","spacing","fixed","data","itemDimension","renderItem","horizontal","onLayout","staticDimension","maxDimension","externalRowStyle","additionalRowStyle","itemContainerStyle","keyExtractor","restProps","items","Error","defaultTotalDimension","dimension","Dimensions","get","totalDimension","setTotalDimension","onLayoutLocal","e","nativeEvent","layout","width","height","newTotalDimension","renderRow","rowItems","rowIndex","separators","isLastRow","itemsPerRow","rowStyle","containerStyle","marginBottom","marginRight","map","item","i","index","containerDimension","fixedSpacing","rows","localKeyExtractor","rowItem","rowItemIndex","join","length","paddingLeft","paddingTop","displayName","propTypes","func","isRequired","arrayOf","any","number","bool","oneOfType","object","array","listKey","string","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef, memo, useState, useCallback, useMemo,\n} from 'react';\nimport {\n  View, Dimensions, FlatList,\n} from 'react-native';\nimport PropTypes from 'prop-types';\nimport { chunkArray, calculateDimensions, generateStyles } from './utils';\n\n\nconst FlatGrid = memo(\n  forwardRef((props, ref) => {\n    const {\n      style,\n      spacing,\n      fixed,\n      data,\n      itemDimension,\n      renderItem,\n      horizontal,\n      onLayout,\n      staticDimension,\n      maxDimension,\n      additionalRowStyle: externalRowStyle,\n      itemContainerStyle,\n      keyExtractor,\n      ...restProps\n    } = props;\n\n    if (props.items && !props.data) {\n      // eslint-disable-next-line no-console\n      throw new Error('React Native Super Grid - Prop \"items\" has been renamed to \"data\" in version 4');\n    }\n\n    const [totalDimension, setTotalDimension] = useState(() => {\n      let defaultTotalDimension = staticDimension;\n\n      if (!staticDimension) {\n        const dimension = horizontal ? 'height' : 'width';\n        defaultTotalDimension = maxDimension || Dimensions.get('window')[dimension];\n      }\n\n      return defaultTotalDimension;\n    });\n\n    const onLayoutLocal = useCallback(\n      (e) => {\n        if (!staticDimension) {\n          const { width, height } = e.nativeEvent.layout || {};\n          let newTotalDimension = horizontal ? height : width;\n\n          if (maxDimension && newTotalDimension > maxDimension) {\n            newTotalDimension = maxDimension;\n          }\n\n          if (totalDimension !== newTotalDimension) {\n            setTotalDimension(newTotalDimension);\n          }\n        }\n\n        // call onLayout prop if passed\n        if (onLayout) {\n          onLayout(e);\n        }\n      },\n      [staticDimension, maxDimension, totalDimension, horizontal, onLayout],\n    );\n\n    const renderRow = useCallback(\n      ({\n        rowItems,\n        rowIndex,\n        separators,\n        isLastRow,\n        itemsPerRow,\n        rowStyle,\n        containerStyle,\n      }) => {\n        // To make up for the top padding\n        let additionalRowStyle = {};\n        if (isLastRow) {\n          additionalRowStyle = {\n            ...(!horizontal ? { marginBottom: spacing } : {}),\n            ...(horizontal ? { marginRight: spacing } : {}),\n          };\n        }\n\n        return (\n          <View style={[rowStyle, additionalRowStyle, externalRowStyle]}>\n            {rowItems.map((item, i) => (\n              <View\n                key={\n                  keyExtractor\n                    ? keyExtractor(item, i)\n                    : `item_${rowIndex * itemsPerRow + i}`\n                }\n                style={[containerStyle, itemContainerStyle]}\n              >\n                {renderItem({\n                  item,\n                  index: rowIndex * itemsPerRow + i,\n                  separators,\n                  rowIndex,\n                })}\n              </View>\n            ))}\n          </View>\n        );\n      },\n      [renderItem, spacing, keyExtractor, externalRowStyle, itemContainerStyle, horizontal],\n    );\n\n    const { containerDimension, itemsPerRow, fixedSpacing } = useMemo(\n      () => calculateDimensions({\n        itemDimension,\n        staticDimension,\n        totalDimension,\n        spacing,\n        fixed,\n      }),\n      [itemDimension, staticDimension, totalDimension, spacing, fixed],\n    );\n\n    const { containerStyle, rowStyle } = useMemo(\n      () => generateStyles({\n        horizontal,\n        itemDimension,\n        containerDimension,\n        spacing,\n        fixedSpacing,\n        fixed,\n      }),\n      [horizontal, itemDimension, containerDimension, spacing, fixedSpacing, fixed],\n    );\n\n    const rows = chunkArray(data, itemsPerRow); // Splitting the data into rows\n\n\n    const localKeyExtractor = useCallback(\n      (rowItems, index) => {\n        if (keyExtractor) {\n          return rowItems\n            .map((rowItem, rowItemIndex) => keyExtractor(rowItem, rowItemIndex))\n            .join('_');\n        }\n        return `row_${index}`;\n      },\n      [keyExtractor],\n    );\n\n\n    return (\n      <FlatList\n        data={rows}\n        ref={ref}\n        extraData={totalDimension}\n        renderItem={({ item, index }) => renderRow({\n          rowItems: item,\n          rowIndex: index,\n          isLastRow: index === rows.length - 1,\n          itemsPerRow,\n          rowStyle,\n          containerStyle,\n        })\n        }\n        style={[\n          {\n            ...(horizontal\n              ? { paddingLeft: spacing }\n              : { paddingTop: spacing }),\n          },\n          style,\n        ]}\n        onLayout={onLayoutLocal}\n        keyExtractor={localKeyExtractor}\n        {...restProps}\n        horizontal={horizontal}\n      />\n    );\n  }),\n);\n\n\nFlatGrid.displayName = 'FlatGrid';\n\nFlatGrid.propTypes = {\n  renderItem: PropTypes.func.isRequired,\n  data: PropTypes.arrayOf(PropTypes.any).isRequired,\n  itemDimension: PropTypes.number,\n  fixed: PropTypes.bool,\n  spacing: PropTypes.number,\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  additionalRowStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  itemContainerStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n  staticDimension: PropTypes.number,\n  horizontal: PropTypes.bool,\n  onLayout: PropTypes.func,\n  keyExtractor: PropTypes.func,\n  listKey: PropTypes.string,\n};\n\nFlatGrid.defaultProps = {\n  fixed: false,\n  itemDimension: 120,\n  spacing: 10,\n  style: {},\n  additionalRowStyle: undefined,\n  itemContainerStyle: undefined,\n  staticDimension: undefined,\n  horizontal: false,\n  onLayout: null,\n  keyExtractor: null,\n  listKey: undefined,\n};\n\n\nexport default FlatGrid;\n"]},"metadata":{},"sourceType":"module"}